# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- none

pool:
  vmImage: ubuntu-latest
  
variables:
  pythonVersion: 3.6
  vmImage: 'ubuntu-latest'
  appDirectory: .
  sshKey: '2105-may24-devops-ubuntu-vm-1_key.pem'
  ansibleLocation: 'agentMachine'
  ansibleDevelopment: '-l development'
  ansibleProduction: '-l production'

stages:
- stage: Publish
  displayName: Publish Artifacts
  jobs:
  - job: Dependencies
    displayName: Install Dependencies
    pool:
      vmImage: $(vmImage)
    steps:
    - checkout: self
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - task: CmdLine@2
      displayName: 'Install dependencies'
      inputs:
        script: python -m pip install --upgrade pip && pip install -r requirements.txt

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Pipeline.Workspace)'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          *.py
          requirements.txt
          ansible/**
        TargetFolder: '$(Pipeline.Workspace)'
        
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'drop-$(pythonVersion)'

- stage: SonarCloud
  dependsOn: Publish
  jobs:
  - job: SonarCloud
    displayName: Static Analysis
    pool:
      vmImage: $(vmImage)

    steps: 
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'moonjun-sonar'
        organization: '2105-may24-devops'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'revature-training-uta_moonjun-p0'
        cliSources: '.'

    - task: SonarCloudAnalyze@1
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

- stage: Development
  displayName: Deploy to development
  dependsOn: SonarCloud
  jobs:
  - deployment: development
    displayName: Deploy to development
    environment: moonjun-vm
    pool:
      vmImage: $(vmImage)
    strategy:
      runOnce:
        deploy:
          steps: 

          - template: azure_templates/ssh-install.yml
            parameters:
              ssh_key: $(sshKey)

          - template: azure_templates/ansible-app-install.yml
            parameters:
              ansible_interface: $(ansibleLocation)
              args: $(ansibleDevelopment)

- stage: Testing
  dependsOn: SonarCloud
  jobs:
  - job: Test
    pool:
      vmImage: $(vmImage)
    steps:
    - script: echo 'This was tested.'

- stage: Production
  displayName: Deploy to production
  dependsOn:
  - Testing
  - Development
  jobs:
  - deployment: production
    environment: production
    pool:
      vmImage: $(vmImage)
    strategy:
      runOnce:
        deploy:
          steps:
              
          - template: azure_templates/ssh-install.yml
            parameters:
              ssh_key: $(sshKey)
      
          - template: azure_templates/ansible-app-install.yml
            parameters:
              ansible_interface: $(ansibleLocation)
              args: $(ansibleProduction)
      