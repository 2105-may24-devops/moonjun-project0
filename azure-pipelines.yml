# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: ubuntu-latest
  
variables:
  pythonVersion: 3.6

stages:
- stage: Publish
  displayName: Publish Artifacts
  jobs:
  - job: Dependencies
    displayName: Install Dependencies
    pool:
      vmImage: ubuntu-latest
    steps:
    - checkout: self
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - task: CmdLine@2
      displayName: 'Install dependencies'
      inputs:
        script: python -m pip install --upgrade pip && pip install -r requirements.txt

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Pipeline.Workspace)'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          *.py
          requirements.txt
          ansible/**
        TargetFolder: '$(Pipeline.Workspace)'
        
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)'
        artifact: 'drop-$(pythonVersion)'

- stage: SonarCloud
  dependsOn: Publish
  jobs:
  - job: SonarCloud
    displayName: Static Analysis
    pool:
      vmImage: ubuntu-latest

    steps: 
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'moonjun-sonar'
        organization: '2105-may24-devops'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'revature-training-uta_moonjun-p0'
        cliSources: '.'

    - task: SonarCloudAnalyze@1
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

- stage: Development
  displayName: Deploy to development
  dependsOn: SonarCloud
  jobs:
  - deployment: development
    displayName: Deploy to development
    environment: moonjun-vm
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps: 
          - task: DownloadPipelineArtifact@1
            inputs:
              buildType: 'current'
              artifactName: 'drop-$(pythonVersion)'
              targetPath: '$(Pipeline.Workspace)'

          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: $(known-hosts)
              sshKeySecureFile: '2105-may24-devops-ubuntu-vm-1_key.pem'
              
          - task: Ansible@0
            inputs:
              ansibleInterface: 'agentMachine'
              playbookPathOnAgentMachine: '$(Pipeline.Workspace)/drop-$(pythonVersion)/ansible/playbook_p0_1.yml'
              inventoriesAgentMachine: 'file'
              inventoryFileOnAgentMachine: '$(Pipeline.Workspace)/drop-$(pythonVersion)/ansible/inventory.yml'
              args: '-l development --extra-vars "ansible_python_interpreter=/usr/bin/python3 deprecation_warnings=True"'
            displayName: 'Ansible - Install'
      
          - task: Ansible@0
            inputs:
              ansibleInterface: 'agentMachine'
              playbookPathOnAgentMachine: '$(Pipeline.Workspace)/drop-$(pythonVersion)/ansible/playbook_p0_2.yml'
              inventoriesAgentMachine: 'file'
              inventoryFileOnAgentMachine: '$(Pipeline.Workspace)/drop-$(pythonVersion)/ansible/inventory.yml'
              args: '-l development --extra-vars "ansible_python_interpreter=/usr/bin/python3 deprecation_warnings=True"'
            displayName: 'Anisble - create venv and install dummy files'

- stage: Testing
  dependsOn: SonarCloud
  jobs:
  - job: test
    pool:
      vmImage: ubuntu-latest
    steps: 
    - task: CmdLine@2
      displayName: Serious Tests
      inputs:
        script: |
          echo Very serious tests going on here
          
          echo Hello world

- stage: Production
  displayName: Deploy to production
  dependsOn:
  - Testing
  - Development
  jobs:
  - deployment: production
    environment: production
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:

          - task: DownloadPipelineArtifact@1
            inputs:
              buildType: 'current'
              artifactName: 'drop-$(pythonVersion)'
              targetPath: '$(Pipeline.Workspace)'
              
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: |
                |1|tmzibrD6nZfT5wQoehEuv5kYp9I=|8L7j+3XDBxHe25fb5qve79/HyC4= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBLP9SkKMe2QK5e4IzLNCvQtDJ06ofyC7rbGHbU6/pye2c+Db+YxnKoMmQVLYIU6F416jFrXbq9IRbcpZXygywc8=
                |1|ZoKXQCehwLebOXz2PvINH+GRCtk=|dEUGqk5N99g/yqdDdJdqfNIzfKw= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBol0BBG7Ah1dEgciEgRkqJ3tnLSOPHGKJtPlhM1yeiQAl3I4OIhTvY+EzMUS4hz/TppuiG6iHxlaU1D814MWC4=
                |1|sfHTYwRnviYhbuza2S0khKyHsk8=|ORd3W9JLidlDqunAIEDyxB29b14= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFAZU4nQNS6lNWqiFzoQ4pjTSmsGyxWmyoZS7pzSWooaua/yV9JDou49KuhCzZakpP/PY0WfTxbo/KrZM+ESW+Q=
                |1|aT1lKmV3r5+2X3uvdrsLKkMySnw=|p46U9E1mhsndCt9SmV2k+F2LRPQ= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBD/ijCrZ+LcL4gEv5Y0K7/h1/QNY85jbQGXZK6SNKSAIaO2HlZsirragLXPLeZrIHWqj8idSCGf8uaU16D1xwy4=
                |1|r4b3T5Ql9Nfajp7rt3mOb0HWmVw=|YNXvpXAPU30AdviZA8sGBjyXKcM= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBB8uiPgYsAfhZo9tzfam2hbv7G1TUF4hk0jzrxO/SjLO2qBpMrlDaQvQWYZI3kdNT1xgFHFKSXcyaPElszq3tqU=
              sshKeySecureFile: '2105-may24-devops-ubuntu-vm-1_key.pem'
      
          - task: Ansible@0
            inputs:
              ansibleInterface: 'agentMachine'
              playbookPathOnAgentMachine: '$(Pipeline.Workspace)/drop-$(pythonVersion)/ansible/playbook_p0_1.yml'
              inventoriesAgentMachine: 'file'
              inventoryFileOnAgentMachine: '$(Pipeline.Workspace)/drop-$(pythonVersion)/ansible/inventory.yml'
              args: '-l production --extra-vars "ansible_python_interpreter=/usr/bin/python3 deprecation_warnings=True"'
            displayName: 'Ansible - Install'
      
          - task: Ansible@0
            inputs:
              ansibleInterface: 'agentMachine'
              playbookPathOnAgentMachine: '$(Pipeline.Workspace)/drop-$(pythonVersion)/ansible/playbook_p0_2.yml'
              inventoriesAgentMachine: 'file'
              inventoryFileOnAgentMachine: '$(Pipeline.Workspace)/drop-$(pythonVersion)/ansible/inventory.yml'
              args: '-l production --extra-vars "ansible_python_interpreter=/usr/bin/python3 deprecation_warnings=True"'
            displayName: 'Anisble - create venv and install dummy files'
      